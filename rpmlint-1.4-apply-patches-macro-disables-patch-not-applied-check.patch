--- rpmlint-1.5/SpecCheck.py.apply_patches~	2014-06-12 22:00:30.177823407 +0200
+++ rpmlint-1.5/SpecCheck.py	2014-06-12 22:00:58.432470176 +0200
@@ -42,6 +42,7 @@ patch_regex = re_tag_compile('Patch(\d*)
 applied_patch_regex = re.compile("^%patch(\d*)")
 applied_patch_p_regex = re.compile("\s-P\s+(\d+)\\b")
 applied_patch_pipe_regex = re.compile(r'\s%\{PATCH(\d+)\}\s*\|\s*(%\{?__)?patch\b')
+apply_patches_regex = re.compile("^%apply_patches")
 source_dir_regex = re.compile("^[^#]*(\$RPM_SOURCE_DIR|%{?_sourcedir}?)")
 obsolete_tags_regex = re_tag_compile(['Serial','Copyright'])
 buildroot_regex = re_tag_compile('BuildRoot')
@@ -168,6 +169,7 @@ class SpecCheck(AbstractCheck.AbstractCh
         patches = {}
         applied_patches = []
         applied_patches_ifarch = []
+        apply_patches = False
         source_dir = False
         buildroot = False
         configure_linenum = None
@@ -279,6 +281,9 @@ class SpecCheck(AbstractCheck.AbstractCh
                     ifarch_depth = -1
                 if_depth = if_depth - 1
 
+            if not apply_patches and apply_patches_regex.search(line):
+                apply_patches = True
+
             res = applied_patch_regex.search(line)
             if res:
                 pnum = res.group(1) or 0
@@ -525,13 +530,14 @@ class SpecCheck(AbstractCheck.AbstractCh
             pkg.current_linenum = None
 
         # process gathered info
-        for pnum, pfile in patches.items():
-            if pnum in applied_patches_ifarch:
-                printWarning(pkg, "%ifarch-applied-patch", "Patch%d:" % pnum,
-                             pfile)
-            if pnum not in applied_patches:
-                printWarning(pkg, "patch-not-applied", "Patch%d:" % pnum,
-                             pfile)
+        if not apply_patches:
+            for pnum, pfile in patches.items():
+                if pnum in applied_patches_ifarch:
+                    printWarning(pkg, "%ifarch-applied-patch", "Patch%d:" % pnum,
+                            pfile)
+                if pnum not in applied_patches:
+                    printWarning(pkg, "patch-not-applied", "Patch%d:" % pnum,
+                            pfile)
 
         # Rest of the checks require a real spec file
         if not self._spec_file:
